fit <- glmgam.fit( cbind( a0 = 1,
a1tilde = 1/meanGeneExp[useForFit] ),
cv2[useForFit] )
a0 <- unname( fit$coefficients["a0"] )
a1 <- unname( fit$coefficients["a1tilde"])
# Get the highly variable gene counts and names
fit_genes <- names(meanGeneExp[useForFit])
females_data <- log(females_data+1)
dim(females_data)
# 这里跟V3的seurat包得到的2000个var基因比较。
load(file = 'seurat_v3_2000_var_genes.Rdata')
length(intersect(rownames(females_data),seurat_v3_2000_var_genes))
# 挑选到的 822 个基因 后续做PCA分析，等等。
dim(females_data)
females_data[1:4,1:4]
save(females_data,file = 'females_high_sv_matrix.Rdata')
# Run a PCA on the highly variable genes
# 这里仅仅是 针对 822 个基因的表达矩阵做PCA分析。
female_sub_pca <- FactoMineR::PCA(
t(females_data),
ncp = ncol(females_data),
graph=FALSE
)
# Estimate which PCs contain significant information with Jackstraw
# the result is 9 significant PCs
# 挑选显著的主成分数量，在seurat包有包装好的函数。
significant_pcs <- jackstraw::permutationPA(
female_sub_pca$ind$coord,
B = 100,
threshold = 0.05,
verbose = TRUE,
seed = NULL
)$r
significant_pcs
# Compute and plot the t-SNE using the significant PCs
# 基于PCA的结果挑选显著的主成分进行tSNE
# 主要是因为 tSNE 耗费计算量。
female_t_sne <- run_plot_tSNE(
pca=female_sub_pca,
pc=significant_pcs,
iter=5000,
conditions=female_stages,
colours=female_stagePalette
)
# Recompute PCA with FactomineR package for the clustering
res.pca <- PCA(
t(females_data),
ncp = significant_pcs,
graph=FALSE
)
# Clustering cells based on the PCA with
# a minimum of 4 expected clusters
# Hierarchical Clustering On Principle Components (HCPC)
# 基于PCA的结果进行层次聚类，这里可以指定是4类。
res.hcpc <- HCPC(
res.pca,
graph = FALSE,
min=4
)
# Extract clustering results
female_clustering <- res.hcpc$data.clust$clust
table(female_clustering)
# Extract clustering results
female_clustering <- res.hcpc$data.clust$clust
female_clustering <- paste("C", female_clustering, sep="")
names(female_clustering) <- rownames(res.hcpc$data.clust)
table(female_clustering)
# 作者这里想把调换两个元素的值，使用了非常丑陋的代码。
# Switch cluster names for convinience purpose (not very clean, quick and dirty method...)
female_clustering[female_clustering=="C1"] <- "C11"
female_clustering[female_clustering=="C2"] <- "C22"
female_clustering[female_clustering=="C22"] <- "C1"
female_clustering[female_clustering=="C11"] <- "C2"
table(female_clustering)
write.csv(female_clustering, file="female_clustering.csv")
# Cluster color palette
female_clusterPalette <- c(
"#560047",
"#a53bad",
"#eb6bac",
"#ffa8a0"
)
# Plot the t-SNE colored by cell clusters
head(female_t_sne)
# 包装了一个ggplot绘图函数。
female_t_sne_new_clusters <- plot_tSNE(
tsne=female_t_sne,
conditions=female_clustering,
colours= female_clusterPalette
)
rm(list=ls())
options(stringsAsFactors = F)
## 加载一系列自定义函数及必备R包，及配色
source('functions.R')
# 加载转录组上游数据分析得到的表达矩阵
load('../females_rpkm.Rdata')
# 提取embryonic stage信息
head(colnames(females))
female_stages <- sapply(strsplit(colnames(females), "_"), `[`, 1)
names(female_stages) <- colnames(females)
table(female_stages)
# 提取capture date 信息，可能没有用。
female_captures <- sapply(strsplit(colnames(females), "_"), `[`, 3)
female_captures <- paste(female_stages, female_captures, sep="_")
names(female_captures) <- colnames(females)
table(female_captures)
# 下面的代码仅仅是对 Seurat(V3) 有效
# Create Seurat object
sce_xx <- CreateSeuratObject(counts = females,
min.cells = 1, min.features = 0,
project = 'c1_xy') # already normalized
# Add meta.data (nUMI and timePoints)
sce_xx <- AddMetaData(object = sce_xx,
metadata = apply(females, 2, sum),
col.name = 'nUMI_raw')
sce_xx <- AddMetaData(object = sce_xx,
metadata = female_stages, col.name = 'female_stages')
female_stages
# 步骤 ScaleData 的耗时取决于电脑系统配置（保守估计大于一分钟）
sce_xx <- ScaleData(object = sce_xx,
vars.to.regress = c('nUMI_raw'),
model.use = 'linear',
use.umi = FALSE)
sce_xx <- FindVariableFeatures(object = sce_xx,
mean.function = ExpMean,
dispersion.function = LogVMR,
x.low.cutoff = 0.0125,
x.high.cutoff = 3,
y.cutoff = 0.5)
length(VariableFeatures(sce_xx))
sce_xx <- FindVariableFeatures(object = sce_xx,
mean.function = ExpMean,
dispersion.function = LogVMR,
x.low.cutoff = 0.0125,
x.high.cutoff = 4,
y.cutoff = 0.5)
length(VariableFeatures(sce_xx))
sce_xx <- FindVariableFeatures(object = sce_xx,
mean.function = ExpMean,
dispersion.function = LogVMR,
x.low.cutoff = 0.0125,
x.high.cutoff = 4,
y.cutoff = 0.5)
length(VariableFeatures(sce_xx))
dev.off()
sce_xx <- FindVariableFeatures(object = sce_xx,
mean.function = ExpMean,
dispersion.function = LogVMR,
x.low.cutoff = 0.0125,
x.high.cutoff = 4,
y.cutoff = 0.5)
length(VariableFeatures(sce_xx))
seurat_v3_2000_var_genes=VariableFeatures(sce_xx)
sce_xx <- RunPCA(object = sce_xx, pc.genes = VariableFeatures(sce_xx))
sce_xx <- RunTSNE(sce_xx )
#sce_xx <- RunUMAP(sce_xx,dims = 1:10)
#VizPCA( sce_xx, pcs.use = 1:2)
DimPlot(object = sce_xx, reduction = "pca")
DimPlot(object = sce_xx, reduction = "ica")
# 针对PCA降维后的表达矩阵进行聚类 FindNeighbors+FindClusters 两个步骤。
sce_xx <- FindNeighbors(object = sce_xx, dims = 1:20, verbose = FALSE)
sce_xx <- FindClusters(object = sce_xx, verbose = FALSE)
# 继续tSNE可视化
DimPlot(object = sce_xx, reduction = "tsne")
sce_xx <- FindClusters(object = sce_xx, verbose = FALSE)
# 继续tSNE可视化
DimPlot(object = sce_xx, reduction = "tsne")
DimPlot(object = sce_xx, reduction = "tsne",
group.by = 'female_stages')
clu1=as.data.frame(Idents(sce_xx))
clu2=read.csv('female_clustering.csv')
identical(rownames(clu1),clu2[,1])
View(clu1)
View(clu2)
table(clu1[,1],clu2[,2])
?FindClusters
# 聚类的时候可以控制 resolution 参数，调整细胞亚群的数量。
sce_xx <- FindClusters(object = sce_xx,resolution = 0.3)
DimPlot(object = sce_xx, reduction = "tsne")
clu1=as.data.frame(Idents(sce_xx))
clu2=read.csv('female_clustering.csv')
identical(rownames(clu1),clu2[,1])
table(clu1[,1],clu2[,2])
rm(list = ls()) # clear the environment
#load all the necessary libraries
options(warn=-1) # turn off warning message globally
suppressMessages(library(Seurat))
library(ggfortify)
load('../females_rpkm.Rdata')
count_matrix=females
count_matrix[1:4,1:4]
dim(count_matrix)
table(cluster)
clu2=read.csv('female_clustering.csv')
View(clu2)
cluster=clu2[,2]
table(cluster)
table(cluster)
col=rainbow(10)[as.factor(cluster)]
col=rainbow(4)[as.factor(cluster)]
table(col)
choose_T_counts=count_matrix
choose_T_counts=choose_T_counts[apply(choose_T_counts,1, sd)>0,]
choose_T_counts=choose_T_counts[names(tail(sort(apply(choose_T_counts,1, sd)),1000)),]
pca_dat <- prcomp(t(choose_T_counts), scale. = TRUE)
p=autoplot(pca_dat,col=col) + theme_classic() + ggtitle('PCA plot')
print(p)
str(pca_dat)
pca_dat$x[1:4,1:4]
new_pca <- FactoMineR::PCA(
t(choose_T_counts),
ncp = ncol(choose_T_counts),
graph=FALSE
)
set.seed(42)
# TSNE即t-distributed Stochastic Neighbor Embedding.
library(Rtsne)
tsne_out <- Rtsne(pca_dat$x[,1:5], perplexity = 10,
pca=FALSE,
max_iter=2000,
verbose=TRUE) # Run TSNE
tsnes=tsne_out$Y
colnames(tsnes) <- c("tSNE1", "tSNE2")
ggplot(tsnes, aes(x = tSNE1, y = tSNE2))+ geom_point(col=col)
res.hcpc <- HCPC(
new_pca,
graph = FALSE,
min=4
)
table(res.hcpc$data.clust$clust)
table(res.hcpc$data.clust$clust,cluster)
new_c=res.hcpc$data.clust$clust
table(new_c,cluster)
rm(list = ls()) # clear the environment
#load all the necessary libraries
options(warn=-1) # turn off warning message globally
suppressMessages(library(Seurat))
library(ggfortify)
load('../females_rpkm.Rdata')
count_matrix=females
count_matrix[1:4,1:4]
dim(count_matrix)
clu2=read.csv('female_clustering.csv')
cluster=clu2[,2]
table(cluster)
table(cluster)
col=rainbow(4)[as.factor(cluster)]
table(col)
choose_T_counts=count_matrix
choose_T_counts=choose_T_counts[apply(choose_T_counts,1, sd)>0,]
choose_T_counts=choose_T_counts[names(tail(sort(apply(choose_T_counts,1, sd)),1000)),]
pca_dat <- prcomp(t(choose_T_counts), scale. = TRUE)
p=autoplot(pca_dat,col=col) + theme_classic() + ggtitle('PCA plot')
print(p)
str(pca_dat)
pca_dat$x[1:4,1:4]
new_pca <- FactoMineR::PCA(
t(choose_T_counts),
ncp = ncol(choose_T_counts),
graph=FALSE
)
set.seed(42)
# TSNE即t-distributed Stochastic Neighbor Embedding.
library(Rtsne)
tsne_out <- Rtsne(pca_dat$x[,1:5], perplexity = 10,
pca=FALSE,
max_iter=2000,
verbose=TRUE) # Run TSNE
tsnes=tsne_out$Y
colnames(tsnes) <- c("tSNE1", "tSNE2")
ggplot(tsnes, aes(x = tSNE1, y = tSNE2))+ geom_point(col=col)
# 拓展，使用 kmeans或者DBSCAN 进行分群
# 这里仍然使用 Hierarchical Clustering On Principle Components (HCPC)
res.hcpc <- HCPC(
new_pca,
graph = FALSE,
min=4
)
new_c=res.hcpc$data.clust$clust
table(new_c,cluster)
set.seed(123456789)
#set.seed()产生随机数
#用于设定随机数种子，一个特定的种子可以产生一个特定的伪随机序列，这个函数的主要目的，
#是让你的模拟能够可重复出现，因为很多时候我们需要取随机数，但这段代码再跑一次的时候，
#结果就不一样了，如果需要重复出现同样的模拟结果的话，就可以用set.seed()。
library(pheatmap)
library(Rtsne)
library(ggfortify)
library(mvtnorm)
ng=500
nc=20
a1=rnorm(ng*nc);dim(a1)=c(ng,nc)
a2=rnorm(ng*nc)+3;dim(a2)=c(ng,nc)
a3=cbind(a1,a2)
colnames(a3)=c(paste0('cell_01_',1:nc),paste0('cell_02_',1:nc))
rownames(a3)=paste('gene_',1:ng,sep = '')
pheatmap(a3)
a3=t(a3);dim(a3) ## PCA分析
pca_dat <- prcomp(a3, scale. = TRUE)
p=autoplot(pca_dat) + theme_classic() + ggtitle('PCA plot')
print(p)
# 这个时候细胞被区分开，而且是很明显的一个主成分。
str(pca_dat)
pca_dat$x[1:4,1:4]
# 参考：http://www.sthda.com/english/wiki/print.php?id=202
# http://www.sthda.com/english/wiki/factoextra-r-package-easy-multivariate-data-analyses-and-elegant-visualization
new_pca <- FactoMineR::PCA(
t(a3),
ncp = ncol(a3),
graph=FALSE
)
str(new_pca)
new_pca$ind$coord[1:4,1:4]
library(factoextra)
fviz_pca_ind(new_pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = group_list, # color by groups
#palette = c("#00AFBB", "#E7B800"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
group_list=c(rep('a1',ncol(a1)),rep('a2',ncol(a2)))
fviz_pca_ind(new_pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = group_list, # color by groups
#palette = c("#00AFBB", "#E7B800"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
group_list
p=autoplot(pca_dat,col=group_list) + theme_classic() + ggtitle('PCA plot')
print(p)
?autoplot
p=autoplot(pca_dat,colour=group_list) + theme_classic() + ggtitle('PCA plot')
print(p)
p=autoplot(pca_dat,colour='group_list') + theme_classic() + ggtitle('PCA plot')
print(p)
ng=500
nc=20
a1=rnorm(ng*nc);dim(a1)=c(ng,nc)
a2=rnorm(ng*nc)+3;dim(a2)=c(ng,nc)
a3=as.data.frame(cbind(a1,a2))
group_list=c(rep('a1',ncol(a1)),rep('a2',ncol(a2)))
colnames(a3)=c(paste0('cell_01_',1:nc),paste0('cell_02_',1:nc))
rownames(a3)=paste('gene_',1:ng,sep = '')
pheatmap(a3)
a3=t(a3);dim(a3) ## PCA分析
pca_dat <- prcomp(a3, scale. = TRUE)
a3$group_list=group_list
View(a3)
a3=as.data.frame(cbind(a1,a2))
View(a3)
a3=t(a3);dim(a3) ## PCA分析
pca_dat <- prcomp(a3, scale. = TRUE)
a3=as.data.frame(a3)
a3$group_list=group_list
p=autoplot(pca_dat,colour='group_list') + theme_classic() + ggtitle('PCA plot')
print(p)
View(a3)
group_list
p=autoplot(pca_dat,colour='group_list') + theme_classic() + ggtitle('PCA plot')
print(p)
pca_dat <- prcomp(a3[,1:500], scale. = TRUE)
a3=as.data.frame(a3)
p=autoplot(pca_dat,colour='group_list') + theme_classic() + ggtitle('PCA plot')
print(p)
ng=500
nc=20
a1=rnorm(ng*nc);dim(a1)=c(ng,nc)
a2=rnorm(ng*nc)+3;dim(a2)=c(ng,nc)
a3=as.data.frame(t(cbind(a1,a2)))
ng=500
nc=20
a1=rnorm(ng*nc);dim(a1)=c(ng,nc)
a2=rnorm(ng*nc)+3;dim(a2)=c(ng,nc)
# 500个基因，40个细胞，其中细胞是行，基因是列
a3=as.data.frame(t(cbind(a1,a2)))
group_list=c(rep('a1',ncol(a1)),rep('a2',ncol(a2)))
a3$group_list=group_list
colnames(a3)=c(paste0('cell_01_',1:nc),paste0('cell_02_',1:nc))
rownames(a3)=paste('gene_',1:ng,sep = '')
ng=500
nc=20
a1=rnorm(ng*nc);dim(a1)=c(ng,nc)
a2=rnorm(ng*nc)+3;dim(a2)=c(ng,nc)
# 500个基因，40个细胞，其中细胞是行，基因是列
a3=as.data.frame(t(cbind(a1,a2)))
group_list=c(rep('a1',ncol(a1)),rep('a2',ncol(a2)))
colnames(a3)=c(paste0('cell_01_',1:nc),paste0('cell_02_',1:nc))
rownames(a3)=paste('gene_',1:ng,sep = '')
pheatmap(a3)
a3$group_list=group_list
pheatmap(a3,show_rownames = F,show_colnames = F)
# 这里可以把分组信息加入
a3$group_list=group_list
a3=t(a3);dim(a3) ## PCA分析
ng=500
nc=20
a1=rnorm(ng*nc);dim(a1)=c(ng,nc)
a2=rnorm(ng*nc)+3;dim(a2)=c(ng,nc)
# 500个基因，40个细胞，其中细胞是行，基因是列
a3=as.data.frame(t(cbind(a1,a2)))
group_list=c(rep('a1',ncol(a1)),rep('a2',ncol(a2)))
colnames(a3)=c(paste0('cell_01_',1:nc),paste0('cell_02_',1:nc))
rownames(a3)=paste('gene_',1:ng,sep = '')
pheatmap(a3,show_rownames = F,show_colnames = F)
# 这里可以把分组信息加入
a3$group_list=group_list
pca_dat <- prcomp(a3[,1:500], scale. = TRUE)
p=autoplot(pca_dat,colour='group_list') + theme_classic() + ggtitle('PCA plot')
print(p)
p=autoplot(pca_dat,data=a3,olour='group_list') + theme_classic() + ggtitle('PCA plot')
p=autoplot(pca_dat,data=a3,colour='group_list') + theme_classic() + ggtitle('PCA plot')
ng=500
nc=20
a1=rnorm(ng*nc);dim(a1)=c(ng,nc)
a2=rnorm(ng*nc)+3;dim(a2)=c(ng,nc)
# 500个基因，40个细胞，其中细胞是行，基因是列
a3=as.data.frame(t(cbind(a1,a2)))
group_list=c(rep('a1',ncol(a1)),rep('a2',ncol(a2)))
colnames(a3)=c(paste0('cell_01_',1:nc),paste0('cell_02_',1:nc))
rownames(a3)=paste('gene_',1:ng,sep = '')
pheatmap(a3,show_rownames = F,show_colnames = F)
# 这里可以把分组信息加入
a3$group_list=group_list
pca_dat <- prcomp(a3[,1:500], scale. = TRUE)
p=autoplot(pca_dat,data=a3,colour='group_list') + theme_classic() + ggtitle('PCA plot')
print(p)
ng=500
nc=20
a1=rnorm(ng*nc);dim(a1)=c(ng,nc)
a2=rnorm(ng*nc)+3;dim(a2)=c(ng,nc)
# 500个基因，40个细胞，其中细胞是行，基因是列
a3=as.data.frame(t(cbind(a1,a2)))
group_list=c(rep('a1',ncol(a1)),rep('a2',ncol(a2)))
rownames(a3)=c(paste0('cell_01_',1:nc),paste0('cell_02_',1:nc))
colnames(a3)=paste('gene_',1:ng,sep = '')
pheatmap(a3,show_rownames = F,show_colnames = F)
# 这里可以把分组信息加入
a3$group_list=group_list
pca_dat <- prcomp(a3[,1:500], scale. = TRUE)
p=autoplot(pca_dat,data=a3,colour='group_list') + theme_classic() + ggtitle('PCA plot')
print(p)
str(pca_dat)
# 首先看坐标
pca_dat$x[1:4,1:4]
plot(pca_dat$x[,1:2])
set.seed(123456789)
#set.seed()产生随机数
#用于设定随机数种子，一个特定的种子可以产生一个特定的伪随机序列，这个函数的主要目的，
#是让你的模拟能够可重复出现，因为很多时候我们需要取随机数，但这段代码再跑一次的时候，
#结果就不一样了，如果需要重复出现同样的模拟结果的话，就可以用set.seed()。
library(pheatmap)
library(Rtsne)
library(ggfortify)
library(mvtnorm)
ng=500
nc=20
a1=rnorm(ng*nc);dim(a1)=c(ng,nc)
a2=rnorm(ng*nc)+3;dim(a2)=c(ng,nc)
# 500个基因，40个细胞，其中细胞是行，基因是列
a3=as.data.frame(t(cbind(a1,a2)))
group_list=c(rep('a1',ncol(a1)),rep('a2',ncol(a2)))
rownames(a3)=c(paste0('cell_01_',1:nc),paste0('cell_02_',1:nc))
colnames(a3)=paste('gene_',1:ng,sep = '')
pheatmap(a3,show_rownames = F,show_colnames = F)
# 这里可以把分组信息加入
dat1=a3
dat1$group_list=group_list
pca_dat <- prcomp(dat1[,1:500], scale. = TRUE)
p=autoplot(pca_dat,data=dat1,colour='group_list') + theme_classic() + ggtitle('PCA plot')
print(p)
# 这个时候细胞被区分开，而且是很明显的一个主成分。
str(pca_dat)
# 首先看坐标
pca_dat$x[1:4,1:4]
# 等价于普通绘图。
plot(pca_dat$x[,1:2])
# 参考：http://www.sthda.com/english/wiki/print.php?id=202
# http://www.sthda.com/english/wiki/factoextra-r-package-easy-multivariate-data-analyses-and-elegant-visualization
dat2=a3
new_pca <- FactoMineR::PCA(
t(dat2),
ncp = ncol(dat2),
graph=FALSE
)
str(new_pca)
new_pca$ind$coord[1:4,1:4]
library(factoextra)
fviz_pca_ind(new_pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = group_list, # color by groups
#palette = c("#00AFBB", "#E7B800"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
new_pca <- FactoMineR::PCA(
dat2,
ncp = nrow(dat2),
graph=FALSE
)
str(new_pca)
new_pca$ind$coord[1:4,1:4]
library(factoextra)
fviz_pca_ind(new_pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = group_list, # color by groups
#palette = c("#00AFBB", "#E7B800"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
str(pca_dat)
