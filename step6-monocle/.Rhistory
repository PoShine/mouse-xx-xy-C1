plot_cell_clusters(cds, 1, 2 )
plot_cell_clusters(cds, 1, 2, color = "cellType")
diff_test_res <- differentialGeneTest(cds,
fullModelFormulaStr = "~cellType")
# Select genes that are significant at an FDR < 10%
sig_genes <- subset(diff_test_res, qval < 0.1)
dim(sig_genes)
head(sig_genes[,c("gene_short_name", "pval", "qval")] )
View(sig_genes)
sig_genes$gene_short_name=rownames(gene_short_name)
head(sig_genes[,c("gene_short_name", "pval", "qval")] )
rownames(gene_short_name)
sig_genes$gene_short_name = rownames(sig_genes)
head(sig_genes[,c("gene_short_name", "pval", "qval")] )
## 首先挑选合适的基因
# 这里选取统计学显著的差异基因列表
ordering_genes <- row.names (subset(diff_test_res, qval < 0.01))
cds <- setOrderingFilter(cds, ordering_genes)
plot_ordering_genes(cds)
cds <- reduceDimension(cds, max_components = 2,
method = 'DDRTree')
# 然后降维
cds <- reduceDimension(cds, max_components = 2,
method = 'DDRTree')
# 接着对细胞进行排序
cds <- orderCells(cds)
## 最后两个可视化函数
plot_cell_trajectory(cds, color_by = "Cluster")
## 这里可以展现marker基因在发育轨迹推断的效果，本例子随便 选取了6个差异表达基因。
plot_genes_in_pseudotime(cds[head(sig_genes$gene_short_name),],
color_by = "Cluster")
# 可以看到运行耗时
load(file = 'diff_test_res.Rdata')
# 可以看到运行耗时
save(diff_test_res,file='diff_test_res.Rdata')
if(F){
Sys.time()
diff_test_res <- differentialGeneTest(cds,
fullModelFormulaStr = "~cellType")
Sys.time()
# 可以看到运行耗时
save(diff_test_res,file='diff_test_res.Rdata')
}
plot_cell_trajectory(cds, color_by = "cellType")
rm(list=ls())
options(stringsAsFactors = F)
library(data.table)
library(densityClust)
library(destiny)
library(rgl)
library(monocle)
source('functions.R')
# 载入rpkm表达量进行可视化，载入counts值找差异基因。
load('../females_rpkm.Rdata')
load('../female_count.Rdata')
# 载入上一步的细胞谱系信息，分2类：
load('../step5-Slingshot/female_pseudotime.Rdata')
females[1:4,1:4]
female_count[1:4,1:4]
head(female_pseudotime)
## 载入细胞的(PCA+tSNE+DBSCAN) 4类
tmp=read.csv('../step1-tSNE-female-RPKM/female_clustering.csv')
female_clustering=tmp[,2];names(female_clustering)=tmp[,1]
table(female_clustering)
rpkm=females
count=female_count
pseudotime=female_pseudotime
lineageNb=1
clusters=female_clustering
lineageNb
View(pseudotime)
lineage_pseudotime_all <- pseudotime[,lineageNb]
lineage <- pseudotime[!is.na(pseudotime[,lineageNb]),lineageNb,drop=FALSE]
lineage
length(lineage)
rpkm_exp_lineage <- rpkm[,rownames(lineage)]
count_exp_lineage <- count[,rownames(lineage)]
clusters_in_lineage <- clusters[names(clusters) %in% rownames(lineage)]
table(clusters_in_lineage)
print("Prepare for DE...")
genes_pseudoT <- prepare_for_DE (
count,
lineage_pseudotime_all,
lineage_pseudotime_all
)
genes_pseudoT
genes_pseudoT$Pseudotime <- lineage_pseudotime_all
print("Compute DE genes...")
lineage_pseudotime_all
View(genes_pseudoT)
length(lineage_pseudotime_all)
rownames(lineage)
#Select cells from the lineage of interest
genes_pseudoT <- genes_pseudoT[,rownames(lineage)]
# Re-detect how many cells express each genes in the subset of cells
genes_pseudoT <- detectGenes(genes_pseudoT, min_expr = 5)
# Remove genes expressed in less than 10 cells
genes_pseudoT <- genes_pseudoT[fData(genes_pseudoT)$num_cells_expressed >= 10, ]
# Remove genes expressed in less than 10 cells
genes_pseudoT <- genes_pseudoT[fData(genes_pseudoT)$num_cells_expressed >= 10, ]
#  monocle这个包提供 differentialGeneTest 函数来做差异分析
# 作用就是挑选那些在某些类别细胞里面高表达的基因，假设其为那一组细胞的marker基因。
DE_genes_pseudoT <- differentialGeneTest(
genes_pseudoT,
fullModelFormulaStr="~sm.ns(Pseudotime, df=3)",
cores = 3
)
genes_pseudoT$Pseudotime
DE_genes_pseudoT
female_lineage1_sig_gene_pseudoT =DE_genes_pseudoT
# 从12612个基因里面挑选出2858个差异显著的基因
female_lineage1_sig_gene_pseudoT <- female_lineage1_sig_gene_pseudoT[female_lineage1_sig_gene_pseudoT$qval<0.05,]
View(female_lineage1_sig_gene_pseudoT)
#############################################################
female_lineage2_sig_gene_pseudoT <- get_var_genes_pseudotime(
females,
female_count,
female_pseudotime,
lineageNb=2,
female_clustering
)
rm(list=ls())
# 主要是使用pheatmap对表达矩阵的基因进行聚类，17类
options(stringsAsFactors = F)
library(data.table)
library(densityClust)
library(destiny)
library(rgl)
library(monocle)
library(pheatmap)
source('functions.R')
# 载入rpkm表达量进行可视化，载入counts值找差异基因。
load('../females_rpkm.Rdata')
load('../female_count.Rdata')
# 载入上一步的细胞谱系信息，分2类：
load('../step5-Slingshot/female_pseudotime.Rdata')
females[1:4,1:4]
female_count[1:4,1:4]
head(female_pseudotime)
## 载入细胞的(PCA+tSNE+DBSCAN) 4类
tmp=read.csv('../step1-tSNE-female-RPKM/female_clustering.csv')
female_clustering=tmp[,2];names(female_clustering)=tmp[,1]
table(female_clustering)
load(file = 'lineage_sig_gene.Rdata')
head(female_lineage1_sig_gene_pseudoT)
head(female_lineage2_sig_gene_pseudoT)
#  为了保证后面的代码不改名，这里修一下
female_lineage1_clustering <- female_lineage1_sig_gene_pseudoT
female_lineage2_clustering <- female_lineage2_sig_gene_pseudoT
# Get gene names
gene_list <- unique(rownames(female_lineage1_clustering),
rownames(female_lineage2_clustering))
length(gene_list)
length(gene_list)
# Get RPKM matrix of the dynamic genes
de_matrix <- log(females[rownames(females) %in% gene_list,]+1)
dim(females)
# Get RPKM matrix of the dynamic genes
de_matrix <- log(females[rownames(females) %in% gene_list,]+1)
dim(de_matrix)
View(female_lineage1_sig_gene_pseudoT)
View(female_lineage2_clustering)
length(gene_list)
identical(rownames(female_lineage1_clustering),
rownames(female_lineage2_clustering))
dim(female_lineage1_clustering)
dim(female_lineage2_clustering)
length(gene_list)
# Get RPKM matrix of the dynamic genes
de_matrix <- log(females[rownames(females) %in% gene_list,]+1)
dim(de_matrix)
# Get cells attributed to the lineage 1
L1_lineage <- female_pseudotime[!is.na(female_pseudotime[,1]),1]
# Order the cells through the pseudotime
L1_ordered_lineage <- L1_lineage[order(L1_lineage, decreasing = FALSE)]
# Get expression values of the dynamic genes in the cells from lineage 1
L1_rpkm_exp_lineage <- de_matrix[,names(L1_ordered_lineage)]
# Order the cells (colums of the expression matrix) through the pseudotime
L1_cells <- L1_rpkm_exp_lineage[,order(match(names(L1_ordered_lineage),
L1_rpkm_exp_lineage))]
# Same as previously but for the linage 2 and but cells are ordered decreasingly (to be ploted on the left side)
L2_lineage <- female_pseudotime[!is.na(female_pseudotime[,2]),2]
L2_ordered_lineage <- L2_lineage[order(L2_lineage, decreasing = TRUE)]
L2_rpkm_exp_lineage <- de_matrix[,names(L2_ordered_lineage)]
L2_cells <- L2_rpkm_exp_lineage[,order(match(names(L2_ordered_lineage),
L2_rpkm_exp_lineage))]
# Extract cell names
L1_lineage_cells <- names(L1_ordered_lineage)
L2_lineage_cells <- names(L2_ordered_lineage)
# Compare nales in the two lisis
common_cells <- intersect(L1_lineage_cells, L2_lineage_cells)
L1_spe_cells <- setdiff(L1_lineage_cells,common_cells)
L2_spe_cells <- setdiff(L2_lineage_cells,common_cells)
# label the cells if they are part of the common branch or only in the lineage 1 branch
L1_cellLin <- c(rep("common cells",length(common_cells)),
rep("L1 cells", length(L1_spe_cells))
)
names(L1_cellLin) <- c(common_cells, L1_spe_cells)
L1_cellLin <- L1_cellLin[order(match(names(L1_cellLin), colnames(L1_cells)))]
# label the cells if they are part of the common branch or only in the lineage 2 branch
L2_cellLin <- c(rep("common cells",length(common_cells)),
rep("L2 cells", length(L2_spe_cells))
)
names(L2_cellLin) <- c(common_cells, L2_spe_cells)
L2_cellLin <- L2_cellLin[order(match(names(L2_cellLin), colnames(L2_cells)))]
# Get the cell cluster of the cells for each cell lineage
cellType_L1 <- female_clustering[colnames(L1_cells)]
colnames(L1_cells) <- paste(colnames(L1_cells), "L1", sep="_")
names(L1_cellLin) <- colnames(L1_cells)
cellType_L2 <- female_clustering[colnames(L2_cells)]
colnames(L2_cells) <- paste(colnames(L2_cells), "L2", sep="_")
names(L2_cellLin) <- colnames(L2_cells)
# Merge cell lineages annotation
cellLin <- c(
L2_cellLin,
L1_cellLin
)
# Merge the cell type annotation
cellType <- c(
cellType_L2,
cellType_L1
)
# Smooth the gene expression (Loess regression)
L2_cells_smooth <- smooth_gene_exp(
L2_cells,
L2_ordered_lineage,
span=0.4
)
L1_cells_smooth <- smooth_gene_exp(
L1_cells,
L1_ordered_lineage,
span=0.4
)
# Merge the smoothed expression matrices
data_heatmap <- data.frame(
L2_cells_smooth,
L1_cells_smooth
)
gene_clustering <- pheatmap::pheatmap(
data_heatmap,
scale="row",
clustering_method="ward.D",
silent=TRUE
)
?hclust
gene_clustering
gene_clustering$tree_row
# Extract the gene pattern clusters with k-means (17 expected clusters)
clusters <- cutree(gene_clustering$tree_row, k = 17)
clustering <- data.frame(clusters)
clustering[,1] <- as.character(clustering[,1])
colnames(clustering) <- "Gene_Clusters"
head(clustering)
table(clustering[,1])
##
### ---------------
###
### Create: Jianming Zeng
### Date: 2019-07-24 15:03:19
### Email: jmzeng1314@163.com
### Blog: http://www.bio-info-trainee.com/
### Forum:  http://www.biotrainee.com/thread-1376-1-1.html
### CAFS/SUSTC/Eli Lilly/University of Macau
### Update Log: 2019-07-24  First version
###
### ---------------
rm(list=ls())
options(stringsAsFactors = F)
library(data.table)
library(densityClust)
library(destiny)
library(rgl)
library(monocle)
library(pheatmap)
source('functions.R')
# 载入rpkm表达量进行可视化，载入counts值找差异基因。
load('../females_rpkm.Rdata')
load('../female_count.Rdata')
# 载入上一步的细胞谱系分类 (2类)
load('../step5-Slingshot/female_pseudotime.Rdata')
females[1:4,1:4]
female_count[1:4,1:4]
head(female_pseudotime)
## 载入细胞的(PCA+tSNE+DBSCAN) 4类
tmp=read.csv('../step1-tSNE-female-RPKM/female_clustering.csv')
female_clustering=tmp[,2];names(female_clustering)=tmp[,1]
table(female_clustering)
## 载入 细胞谱系分类，细胞的聚类，基因的分类：
load(file = 'lineage_sig_gene.Rdata')
load(file = 'gene_clustering.Rdata')
load(file = 'for_heatmap.Rdata')
table(cellLin)
table(cellType)
table(clustering[,1])
# Palette for the heatmap (pheatmap does not take the color palette into account, I don't know why but I kept the code)
gene_cluster_palette <- c(
'#a6cee3',
'#1f78b4',
'#b2df8a',
'#33a02c',
'#fb9a99',
'#e31a1c',
'#fdbf6f',
'#ff7f00',
'#cab2d6',
'#6a3d9a',
'#ffff99',
'#b15928',
'#49beaa',
'#611c35',
'#2708a0',
'#fccde5',
'#bc80bd'
)
gene_cluster_colors <- gene_cluster_palette[1:max(clusters)]
names(gene_cluster_colors) <- 1:max(clusters)
# Annotate the row of the hearmap with the gene clusters
annotation_row <- data.frame(clustering=clustering)
# Annotation of the colums of the heatmap with the cell lineage, the cell type and the embryonic stage of the cells
annotation_col <- data.frame(
cellLineages=cellLin,
cellType=cellType,
Stages=sapply(strsplit(colnames(data_heatmap), "_"), `[`, 1)
)
View(annotation_row)
View(annotation_col)
# Colors for the cell lineages
cellLinCol <- c(
"#3b3561",
"#c8c8c8",
"#ff6663"
)
names(cellLinCol) <- unique(cellLin)
# Colors for the cell clusters
cellTypeCol <- c(
C2="#a53bad",
C1="#560047",
C3="#eb6bac",
C4="#ffa8a0"
)
names(cellTypeCol) <- unique(cellType)
# Legend for all the aannotation to plot on pheatmap
annotation_colors <- list(
cellType=cellTypeCol,
cellLineages=cellLinCol,
clustering=gene_cluster_colors,
Stages=c(
E10.5="#2754b5",
E11.5="#8a00b0",
E12.5="#d20e0f",
E13.5="#f77f05",
E16.5="#f9db21",
P6="#43f14b"
)
)
# Color palette for gene expression
cold <- colorRampPalette(c('#f7fcf0','#41b6c4','#253494','#081d58','#081d58'))
warm <- colorRampPalette(c('#ffffb2','#fecc5c','#e31a1c','#800026','#800026'))
mypalette <- c(rev(cold(21)), warm(20))
breaksList = seq(-2.2, 2.5, by = 0.2)
# Plot the heatmap
library(pheatmap)
# Plot the heatmap
library(pheatmap)
tiff(file="female_heatmap_DE_genes_granulosa_progenitors_k_17_pval_005.tiff",
res = 300, height = 21, width = 18, units = 'cm')
gene_clustering <- pheatmap(
data_heatmap,
scale="row",
gaps_col=length(cellType_L2),
show_colnames=FALSE,
show_rownames=FALSE,
cluster_cols=FALSE,
clustering_method="ward.D",
annotation_row=annotation_row,
annotation_col=annotation_col,
annotation_colors=annotation_colors,
cutree_rows=17,
annotation_names_row=FALSE,
color=mypalette
)
dev.off()
dev.off()
dev.off()
# Plot the heatmap
library(pheatmap)
tiff(file="female_heatmap_DE_genes_granulosa_progenitors_k_17_pval_005.tiff",
res = 300, height = 21, width = 18, units = 'cm')
gene_clustering <- pheatmap(
data_heatmap,
scale="row",
gaps_col=length(cellType_L2),
show_colnames=FALSE,
show_rownames=FALSE,
cluster_cols=FALSE,
clustering_method="ward.D",
annotation_row=annotation_row,
annotation_col=annotation_col,
annotation_colors=annotation_colors,
cutree_rows=17,
annotation_names_row=FALSE,
color=mypalette
)
dev.off()
##
### ---------------
###
### Create: Jianming Zeng
### Date: 2019-07-24 15:03:19
### Email: jmzeng1314@163.com
### Blog: http://www.bio-info-trainee.com/
### Forum:  http://www.biotrainee.com/thread-1376-1-1.html
### CAFS/SUSTC/Eli Lilly/University of Macau
### Update Log: 2019-07-24  First version
###
### ---------------
rm(list=ls())
options(stringsAsFactors = F)
library(data.table)
library(densityClust)
library(destiny)
library(rgl)
library(monocle)
library(pheatmap)
source('functions.R')
load('../females_rpkm.Rdata')
load('../female_count.Rdata')
load('../step5-Slingshot/female_pseudotime.Rdata')
females[1:4,1:4]
female_count[1:4,1:4]
head(female_pseudotime)
tmp=read.csv('../step1-tSNE-female-RPKM/female_clustering.csv')
female_clustering=tmp[,2];names(female_clustering)=tmp[,1]
table(female_clustering)
load(file = 'lineage_sig_gene.Rdata')
load(file = 'gene_clustering.Rdata')
load(file = 'for_heatmap.Rdata')
table(cellLin)
table(cellType)
table(clustering[,1])
head(clustering)
# Load manually annotated gene clustering results (gene custers classified as a, b, c... according to their expression pattern redundandy, see paper fig. 2)
dyn_genes <- read.csv(file="../female_lineages_DE_gene_pseudotime_clustered_annotated.csv")
gene_names <- dyn_genes$Genes
View(dyn_genes)
# Subset genes with a correnc entrez ID
gene_clusters <- dyn_genes[dyn_genes$Genes %in% entrez_genes$SYMBOL,,drop=FALSE]
##
### ---------------
###
### Create: Jianming Zeng
### Date: 2019-07-24 15:03:19
### Email: jmzeng1314@163.com
### Blog: http://www.bio-info-trainee.com/
### Forum:  http://www.biotrainee.com/thread-1376-1-1.html
### CAFS/SUSTC/Eli Lilly/University of Macau
### Update Log: 2019-07-24  First version
###
### ---------------
rm(list=ls())
options(stringsAsFactors = F)
library(data.table)
library(densityClust)
library(destiny)
library(rgl)
library(monocle)
library(pheatmap)
source('functions.R')
load('../females_rpkm.Rdata')
load('../female_count.Rdata')
load('../step5-Slingshot/female_pseudotime.Rdata')
females[1:4,1:4]
female_count[1:4,1:4]
head(female_pseudotime)
tmp=read.csv('../step1-tSNE-female-RPKM/female_clustering.csv')
female_clustering=tmp[,2];names(female_clustering)=tmp[,1]
table(female_clustering)
load(file = 'lineage_sig_gene.Rdata')
load(file = 'gene_clustering.Rdata')
load(file = 'for_heatmap.Rdata')
table(cellLin)
table(cellType)
table(clustering[,1])
head(clustering)
# Load manually annotated gene clustering results (gene custers classified as a, b, c... according to their expression pattern redundandy, see paper fig. 2)
dyn_genes <- read.csv(file="../female_lineages_DE_gene_pseudotime_clustered_annotated.csv")
gene_names <- dyn_genes$Genes
library(clusterProfiler)
#convert gene ID into entrez genes
entrez_genes <- bitr(gene_names, fromType="SYMBOL", toType="ENTREZID", OrgDb="org.Mm.eg.db")
# Subset genes with a correnc entrez ID
gene_clusters <- dyn_genes[dyn_genes$Genes %in% entrez_genes$SYMBOL,,drop=FALSE]
# Generate data frame for GoSemSim
de_gene_clusters <- data.frame(
ENTREZID=entrez_genes[!duplicated(entrez_genes$SYMBOL),"ENTREZID"],
Gene_Clusters=gene_clusters$Gene.categories
)
de_gene_clusters
length(de_gene_clusters)
View(de_gene_clusters)
# Run enrichment analysis
formula_res <- compareCluster(
ENTREZID~Gene_Clusters,
data=de_gene_clusters,
fun="enrichGO",
OrgDb="org.Mm.eg.db",
ont		   = "BP",
pAdjustMethod = "BH",
pvalueCutoff  = 0.05,
qvalueCutoff  = 0.05
)
split(de_gene_clusters,de_gene_clusters$Gene_Clusters)
